{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":23498,"sourceType":"datasetVersion","datasetId":310}],"dockerImageVersionId":30699,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nfrom pandas import Series\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport sklearn.metrics as metrique \nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix ,accuracy_score","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:22:42.167817Z","iopub.execute_input":"2024-05-09T17:22:42.168261Z","iopub.status.idle":"2024-05-09T17:22:44.920898Z","shell.execute_reply.started":"2024-05-09T17:22:42.168233Z","shell.execute_reply":"2024-05-09T17:22:44.919776Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import confusion_matrix","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:22:44.922808Z","iopub.execute_input":"2024-05-09T17:22:44.923366Z","iopub.status.idle":"2024-05-09T17:22:45.365296Z","shell.execute_reply.started":"2024-05-09T17:22:44.923328Z","shell.execute_reply":"2024-05-09T17:22:45.364316Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/input/creditcardfraud/creditcard.csv', na_filter=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:23:11.561284Z","iopub.execute_input":"2024-05-09T17:23:11.561673Z","iopub.status.idle":"2024-05-09T17:23:15.371922Z","shell.execute_reply.started":"2024-05-09T17:23:11.561641Z","shell.execute_reply":"2024-05-09T17:23:15.371103Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"data.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:25:13.324692Z","iopub.execute_input":"2024-05-09T17:25:13.325399Z","iopub.status.idle":"2024-05-09T17:25:13.379447Z","shell.execute_reply.started":"2024-05-09T17:25:13.325359Z","shell.execute_reply":"2024-05-09T17:25:13.378495Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   Time        V1        V2        V3        V4        V5        V6        V7  \\\n0   0.0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   \n1   0.0  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   \n2   1.0 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   \n3   1.0 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   \n4   2.0 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   \n\n         V8        V9  ...       V21       V22       V23       V24       V25  \\\n0  0.098698  0.363787  ... -0.018307  0.277838 -0.110474  0.066928  0.128539   \n1  0.085102 -0.255425  ... -0.225775 -0.638672  0.101288 -0.339846  0.167170   \n2  0.247676 -1.514654  ...  0.247998  0.771679  0.909412 -0.689281 -0.327642   \n3  0.377436 -1.387024  ... -0.108300  0.005274 -0.190321 -1.175575  0.647376   \n4 -0.270533  0.817739  ... -0.009431  0.798278 -0.137458  0.141267 -0.206010   \n\n        V26       V27       V28  Amount  Class  \n0 -0.189115  0.133558 -0.021053  149.62      0  \n1  0.125895 -0.008983  0.014724    2.69      0  \n2 -0.139097 -0.055353 -0.059752  378.66      0  \n3 -0.221929  0.062723  0.061458  123.50      0  \n4  0.502292  0.219422  0.215153   69.99      0  \n\n[5 rows x 31 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Time</th>\n      <th>V1</th>\n      <th>V2</th>\n      <th>V3</th>\n      <th>V4</th>\n      <th>V5</th>\n      <th>V6</th>\n      <th>V7</th>\n      <th>V8</th>\n      <th>V9</th>\n      <th>...</th>\n      <th>V21</th>\n      <th>V22</th>\n      <th>V23</th>\n      <th>V24</th>\n      <th>V25</th>\n      <th>V26</th>\n      <th>V27</th>\n      <th>V28</th>\n      <th>Amount</th>\n      <th>Class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0</td>\n      <td>-1.359807</td>\n      <td>-0.072781</td>\n      <td>2.536347</td>\n      <td>1.378155</td>\n      <td>-0.338321</td>\n      <td>0.462388</td>\n      <td>0.239599</td>\n      <td>0.098698</td>\n      <td>0.363787</td>\n      <td>...</td>\n      <td>-0.018307</td>\n      <td>0.277838</td>\n      <td>-0.110474</td>\n      <td>0.066928</td>\n      <td>0.128539</td>\n      <td>-0.189115</td>\n      <td>0.133558</td>\n      <td>-0.021053</td>\n      <td>149.62</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.0</td>\n      <td>1.191857</td>\n      <td>0.266151</td>\n      <td>0.166480</td>\n      <td>0.448154</td>\n      <td>0.060018</td>\n      <td>-0.082361</td>\n      <td>-0.078803</td>\n      <td>0.085102</td>\n      <td>-0.255425</td>\n      <td>...</td>\n      <td>-0.225775</td>\n      <td>-0.638672</td>\n      <td>0.101288</td>\n      <td>-0.339846</td>\n      <td>0.167170</td>\n      <td>0.125895</td>\n      <td>-0.008983</td>\n      <td>0.014724</td>\n      <td>2.69</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.0</td>\n      <td>-1.358354</td>\n      <td>-1.340163</td>\n      <td>1.773209</td>\n      <td>0.379780</td>\n      <td>-0.503198</td>\n      <td>1.800499</td>\n      <td>0.791461</td>\n      <td>0.247676</td>\n      <td>-1.514654</td>\n      <td>...</td>\n      <td>0.247998</td>\n      <td>0.771679</td>\n      <td>0.909412</td>\n      <td>-0.689281</td>\n      <td>-0.327642</td>\n      <td>-0.139097</td>\n      <td>-0.055353</td>\n      <td>-0.059752</td>\n      <td>378.66</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1.0</td>\n      <td>-0.966272</td>\n      <td>-0.185226</td>\n      <td>1.792993</td>\n      <td>-0.863291</td>\n      <td>-0.010309</td>\n      <td>1.247203</td>\n      <td>0.237609</td>\n      <td>0.377436</td>\n      <td>-1.387024</td>\n      <td>...</td>\n      <td>-0.108300</td>\n      <td>0.005274</td>\n      <td>-0.190321</td>\n      <td>-1.175575</td>\n      <td>0.647376</td>\n      <td>-0.221929</td>\n      <td>0.062723</td>\n      <td>0.061458</td>\n      <td>123.50</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2.0</td>\n      <td>-1.158233</td>\n      <td>0.877737</td>\n      <td>1.548718</td>\n      <td>0.403034</td>\n      <td>-0.407193</td>\n      <td>0.095921</td>\n      <td>0.592941</td>\n      <td>-0.270533</td>\n      <td>0.817739</td>\n      <td>...</td>\n      <td>-0.009431</td>\n      <td>0.798278</td>\n      <td>-0.137458</td>\n      <td>0.141267</td>\n      <td>-0.206010</td>\n      <td>0.502292</td>\n      <td>0.219422</td>\n      <td>0.215153</td>\n      <td>69.99</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 31 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"data.describe()","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:25:20.139313Z","iopub.execute_input":"2024-05-09T17:25:20.139677Z","iopub.status.idle":"2024-05-09T17:25:20.525944Z","shell.execute_reply.started":"2024-05-09T17:25:20.139647Z","shell.execute_reply":"2024-05-09T17:25:20.525037Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"                Time            V1            V2            V3            V4  \\\ncount  284807.000000  2.848070e+05  2.848070e+05  2.848070e+05  2.848070e+05   \nmean    94813.859575  1.168375e-15  3.416908e-16 -1.379537e-15  2.074095e-15   \nstd     47488.145955  1.958696e+00  1.651309e+00  1.516255e+00  1.415869e+00   \nmin         0.000000 -5.640751e+01 -7.271573e+01 -4.832559e+01 -5.683171e+00   \n25%     54201.500000 -9.203734e-01 -5.985499e-01 -8.903648e-01 -8.486401e-01   \n50%     84692.000000  1.810880e-02  6.548556e-02  1.798463e-01 -1.984653e-02   \n75%    139320.500000  1.315642e+00  8.037239e-01  1.027196e+00  7.433413e-01   \nmax    172792.000000  2.454930e+00  2.205773e+01  9.382558e+00  1.687534e+01   \n\n                 V5            V6            V7            V8            V9  \\\ncount  2.848070e+05  2.848070e+05  2.848070e+05  2.848070e+05  2.848070e+05   \nmean   9.604066e-16  1.487313e-15 -5.556467e-16  1.213481e-16 -2.406331e-15   \nstd    1.380247e+00  1.332271e+00  1.237094e+00  1.194353e+00  1.098632e+00   \nmin   -1.137433e+02 -2.616051e+01 -4.355724e+01 -7.321672e+01 -1.343407e+01   \n25%   -6.915971e-01 -7.682956e-01 -5.540759e-01 -2.086297e-01 -6.430976e-01   \n50%   -5.433583e-02 -2.741871e-01  4.010308e-02  2.235804e-02 -5.142873e-02   \n75%    6.119264e-01  3.985649e-01  5.704361e-01  3.273459e-01  5.971390e-01   \nmax    3.480167e+01  7.330163e+01  1.205895e+02  2.000721e+01  1.559499e+01   \n\n       ...           V21           V22           V23           V24  \\\ncount  ...  2.848070e+05  2.848070e+05  2.848070e+05  2.848070e+05   \nmean   ...  1.654067e-16 -3.568593e-16  2.578648e-16  4.473266e-15   \nstd    ...  7.345240e-01  7.257016e-01  6.244603e-01  6.056471e-01   \nmin    ... -3.483038e+01 -1.093314e+01 -4.480774e+01 -2.836627e+00   \n25%    ... -2.283949e-01 -5.423504e-01 -1.618463e-01 -3.545861e-01   \n50%    ... -2.945017e-02  6.781943e-03 -1.119293e-02  4.097606e-02   \n75%    ...  1.863772e-01  5.285536e-01  1.476421e-01  4.395266e-01   \nmax    ...  2.720284e+01  1.050309e+01  2.252841e+01  4.584549e+00   \n\n                V25           V26           V27           V28         Amount  \\\ncount  2.848070e+05  2.848070e+05  2.848070e+05  2.848070e+05  284807.000000   \nmean   5.340915e-16  1.683437e-15 -3.660091e-16 -1.227390e-16      88.349619   \nstd    5.212781e-01  4.822270e-01  4.036325e-01  3.300833e-01     250.120109   \nmin   -1.029540e+01 -2.604551e+00 -2.256568e+01 -1.543008e+01       0.000000   \n25%   -3.171451e-01 -3.269839e-01 -7.083953e-02 -5.295979e-02       5.600000   \n50%    1.659350e-02 -5.213911e-02  1.342146e-03  1.124383e-02      22.000000   \n75%    3.507156e-01  2.409522e-01  9.104512e-02  7.827995e-02      77.165000   \nmax    7.519589e+00  3.517346e+00  3.161220e+01  3.384781e+01   25691.160000   \n\n               Class  \ncount  284807.000000  \nmean        0.001727  \nstd         0.041527  \nmin         0.000000  \n25%         0.000000  \n50%         0.000000  \n75%         0.000000  \nmax         1.000000  \n\n[8 rows x 31 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Time</th>\n      <th>V1</th>\n      <th>V2</th>\n      <th>V3</th>\n      <th>V4</th>\n      <th>V5</th>\n      <th>V6</th>\n      <th>V7</th>\n      <th>V8</th>\n      <th>V9</th>\n      <th>...</th>\n      <th>V21</th>\n      <th>V22</th>\n      <th>V23</th>\n      <th>V24</th>\n      <th>V25</th>\n      <th>V26</th>\n      <th>V27</th>\n      <th>V28</th>\n      <th>Amount</th>\n      <th>Class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>284807.000000</td>\n      <td>2.848070e+05</td>\n      <td>2.848070e+05</td>\n      <td>2.848070e+05</td>\n      <td>2.848070e+05</td>\n      <td>2.848070e+05</td>\n      <td>2.848070e+05</td>\n      <td>2.848070e+05</td>\n      <td>2.848070e+05</td>\n      <td>2.848070e+05</td>\n      <td>...</td>\n      <td>2.848070e+05</td>\n      <td>2.848070e+05</td>\n      <td>2.848070e+05</td>\n      <td>2.848070e+05</td>\n      <td>2.848070e+05</td>\n      <td>2.848070e+05</td>\n      <td>2.848070e+05</td>\n      <td>2.848070e+05</td>\n      <td>284807.000000</td>\n      <td>284807.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>94813.859575</td>\n      <td>1.168375e-15</td>\n      <td>3.416908e-16</td>\n      <td>-1.379537e-15</td>\n      <td>2.074095e-15</td>\n      <td>9.604066e-16</td>\n      <td>1.487313e-15</td>\n      <td>-5.556467e-16</td>\n      <td>1.213481e-16</td>\n      <td>-2.406331e-15</td>\n      <td>...</td>\n      <td>1.654067e-16</td>\n      <td>-3.568593e-16</td>\n      <td>2.578648e-16</td>\n      <td>4.473266e-15</td>\n      <td>5.340915e-16</td>\n      <td>1.683437e-15</td>\n      <td>-3.660091e-16</td>\n      <td>-1.227390e-16</td>\n      <td>88.349619</td>\n      <td>0.001727</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>47488.145955</td>\n      <td>1.958696e+00</td>\n      <td>1.651309e+00</td>\n      <td>1.516255e+00</td>\n      <td>1.415869e+00</td>\n      <td>1.380247e+00</td>\n      <td>1.332271e+00</td>\n      <td>1.237094e+00</td>\n      <td>1.194353e+00</td>\n      <td>1.098632e+00</td>\n      <td>...</td>\n      <td>7.345240e-01</td>\n      <td>7.257016e-01</td>\n      <td>6.244603e-01</td>\n      <td>6.056471e-01</td>\n      <td>5.212781e-01</td>\n      <td>4.822270e-01</td>\n      <td>4.036325e-01</td>\n      <td>3.300833e-01</td>\n      <td>250.120109</td>\n      <td>0.041527</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>-5.640751e+01</td>\n      <td>-7.271573e+01</td>\n      <td>-4.832559e+01</td>\n      <td>-5.683171e+00</td>\n      <td>-1.137433e+02</td>\n      <td>-2.616051e+01</td>\n      <td>-4.355724e+01</td>\n      <td>-7.321672e+01</td>\n      <td>-1.343407e+01</td>\n      <td>...</td>\n      <td>-3.483038e+01</td>\n      <td>-1.093314e+01</td>\n      <td>-4.480774e+01</td>\n      <td>-2.836627e+00</td>\n      <td>-1.029540e+01</td>\n      <td>-2.604551e+00</td>\n      <td>-2.256568e+01</td>\n      <td>-1.543008e+01</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>54201.500000</td>\n      <td>-9.203734e-01</td>\n      <td>-5.985499e-01</td>\n      <td>-8.903648e-01</td>\n      <td>-8.486401e-01</td>\n      <td>-6.915971e-01</td>\n      <td>-7.682956e-01</td>\n      <td>-5.540759e-01</td>\n      <td>-2.086297e-01</td>\n      <td>-6.430976e-01</td>\n      <td>...</td>\n      <td>-2.283949e-01</td>\n      <td>-5.423504e-01</td>\n      <td>-1.618463e-01</td>\n      <td>-3.545861e-01</td>\n      <td>-3.171451e-01</td>\n      <td>-3.269839e-01</td>\n      <td>-7.083953e-02</td>\n      <td>-5.295979e-02</td>\n      <td>5.600000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>84692.000000</td>\n      <td>1.810880e-02</td>\n      <td>6.548556e-02</td>\n      <td>1.798463e-01</td>\n      <td>-1.984653e-02</td>\n      <td>-5.433583e-02</td>\n      <td>-2.741871e-01</td>\n      <td>4.010308e-02</td>\n      <td>2.235804e-02</td>\n      <td>-5.142873e-02</td>\n      <td>...</td>\n      <td>-2.945017e-02</td>\n      <td>6.781943e-03</td>\n      <td>-1.119293e-02</td>\n      <td>4.097606e-02</td>\n      <td>1.659350e-02</td>\n      <td>-5.213911e-02</td>\n      <td>1.342146e-03</td>\n      <td>1.124383e-02</td>\n      <td>22.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>139320.500000</td>\n      <td>1.315642e+00</td>\n      <td>8.037239e-01</td>\n      <td>1.027196e+00</td>\n      <td>7.433413e-01</td>\n      <td>6.119264e-01</td>\n      <td>3.985649e-01</td>\n      <td>5.704361e-01</td>\n      <td>3.273459e-01</td>\n      <td>5.971390e-01</td>\n      <td>...</td>\n      <td>1.863772e-01</td>\n      <td>5.285536e-01</td>\n      <td>1.476421e-01</td>\n      <td>4.395266e-01</td>\n      <td>3.507156e-01</td>\n      <td>2.409522e-01</td>\n      <td>9.104512e-02</td>\n      <td>7.827995e-02</td>\n      <td>77.165000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>172792.000000</td>\n      <td>2.454930e+00</td>\n      <td>2.205773e+01</td>\n      <td>9.382558e+00</td>\n      <td>1.687534e+01</td>\n      <td>3.480167e+01</td>\n      <td>7.330163e+01</td>\n      <td>1.205895e+02</td>\n      <td>2.000721e+01</td>\n      <td>1.559499e+01</td>\n      <td>...</td>\n      <td>2.720284e+01</td>\n      <td>1.050309e+01</td>\n      <td>2.252841e+01</td>\n      <td>4.584549e+00</td>\n      <td>7.519589e+00</td>\n      <td>3.517346e+00</td>\n      <td>3.161220e+01</td>\n      <td>3.384781e+01</td>\n      <td>25691.160000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows Ã— 31 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"data.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:25:32.123333Z","iopub.execute_input":"2024-05-09T17:25:32.124013Z","iopub.status.idle":"2024-05-09T17:25:32.162110Z","shell.execute_reply.started":"2024-05-09T17:25:32.123980Z","shell.execute_reply":"2024-05-09T17:25:32.161049Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 284807 entries, 0 to 284806\nData columns (total 31 columns):\n #   Column  Non-Null Count   Dtype  \n---  ------  --------------   -----  \n 0   Time    284807 non-null  float64\n 1   V1      284807 non-null  float64\n 2   V2      284807 non-null  float64\n 3   V3      284807 non-null  float64\n 4   V4      284807 non-null  float64\n 5   V5      284807 non-null  float64\n 6   V6      284807 non-null  float64\n 7   V7      284807 non-null  float64\n 8   V8      284807 non-null  float64\n 9   V9      284807 non-null  float64\n 10  V10     284807 non-null  float64\n 11  V11     284807 non-null  float64\n 12  V12     284807 non-null  float64\n 13  V13     284807 non-null  float64\n 14  V14     284807 non-null  float64\n 15  V15     284807 non-null  float64\n 16  V16     284807 non-null  float64\n 17  V17     284807 non-null  float64\n 18  V18     284807 non-null  float64\n 19  V19     284807 non-null  float64\n 20  V20     284807 non-null  float64\n 21  V21     284807 non-null  float64\n 22  V22     284807 non-null  float64\n 23  V23     284807 non-null  float64\n 24  V24     284807 non-null  float64\n 25  V25     284807 non-null  float64\n 26  V26     284807 non-null  float64\n 27  V27     284807 non-null  float64\n 28  V28     284807 non-null  float64\n 29  Amount  284807 non-null  float64\n 30  Class   284807 non-null  int64  \ndtypes: float64(30), int64(1)\nmemory usage: 67.4 MB\n","output_type":"stream"}]},{"cell_type":"code","source":"data['Class'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:25:44.916533Z","iopub.execute_input":"2024-05-09T17:25:44.916887Z","iopub.status.idle":"2024-05-09T17:25:44.932725Z","shell.execute_reply.started":"2024-05-09T17:25:44.916861Z","shell.execute_reply":"2024-05-09T17:25:44.931699Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"Class\n0    284315\n1       492\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(7, 6))\n# Affichage du dÃ©compte des valeurs de la colonne \"Class\" avec les couleurs par dÃ©faut de Seaborn\nax = sns.countplot(data=data, x='Class')\n\n# Calcul du pourcentage de chaque classe\ntotal = len(data)\nfraud_count = len(data[data['Class'] == 1])\nnormal_count = total - fraud_count\nfraud_percentage = (fraud_count / total) * 100\nnormal_percentage = (normal_count / total) * 100\n\n# Ajout des pourcentages Ã  l'intÃ©rieur de chaque barre\nfor i, p in enumerate(ax.patches):\n    if i == 0:\n        ax.text(p.get_x() + p.get_width() / 2., p.get_height() + 5000,\n                f\"{normal_percentage:.2f}%\", ha='center')\n    else:\n        ax.text(p.get_x() + p.get_width() / 2., p.get_height() + 5000,\n                f\"{fraud_percentage:.2f}%\", ha='center')\n\n# RÃ©cupÃ©ration de la palette de couleurs par dÃ©faut de Seaborn\ndefault_palette = sns.color_palette()\n\n# RÃ©cupÃ©ration des poignÃ©es (handles) des barres\nhandles = [plt.Rectangle((0,0),1,1, color=color) for color in default_palette[:2]]\n\n# Ajout de la lÃ©gende avec les libellÃ©s correspondants\nplt.legend(handles, ['Normal', 'Fraude'])\n\n# Ajout des Ã©tiquettes des axes\nplt.xlabel('Classe')\nplt.ylabel('Nombre de transactions')\n\n# Affichage du graphique\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:26:03.136103Z","iopub.execute_input":"2024-05-09T17:26:03.136479Z","iopub.status.idle":"2024-05-09T17:26:03.425253Z","shell.execute_reply.started":"2024-05-09T17:26:03.136450Z","shell.execute_reply":"2024-05-09T17:26:03.424397Z"},"trusted":true},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 700x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"Normal=data[data.Class==0]\nFraud=data[data.Class==1]","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:27:58.792053Z","iopub.execute_input":"2024-05-09T17:27:58.792464Z","iopub.status.idle":"2024-05-09T17:27:58.829808Z","shell.execute_reply.started":"2024-05-09T17:27:58.792434Z","shell.execute_reply":"2024-05-09T17:27:58.828757Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"Normal_sample=Normal.sample(n=20000)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:30:26.307235Z","iopub.execute_input":"2024-05-09T17:30:26.307615Z","iopub.status.idle":"2024-05-09T17:30:26.330236Z","shell.execute_reply.started":"2024-05-09T17:30:26.307586Z","shell.execute_reply":"2024-05-09T17:30:26.329319Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"tr_data = pd.concat([Normal_sample,Fraud],axis=0)\ntr_data.shape","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:31:56.945825Z","iopub.execute_input":"2024-05-09T17:31:56.946199Z","iopub.status.idle":"2024-05-09T17:31:56.954500Z","shell.execute_reply.started":"2024-05-09T17:31:56.946172Z","shell.execute_reply":"2024-05-09T17:31:56.953582Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"(20492, 31)"},"metadata":{}}]},{"cell_type":"code","source":"X = tr_data.drop(['Class'], axis = 'columns')\nLabel_Data = tr_data['Class']","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:32:08.357301Z","iopub.execute_input":"2024-05-09T17:32:08.357707Z","iopub.status.idle":"2024-05-09T17:32:08.364713Z","shell.execute_reply.started":"2024-05-09T17:32:08.357673Z","shell.execute_reply":"2024-05-09T17:32:08.363759Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"Label_Data.value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:32:35.144377Z","iopub.execute_input":"2024-05-09T17:32:35.145068Z","iopub.status.idle":"2024-05-09T17:32:35.153539Z","shell.execute_reply.started":"2024-05-09T17:32:35.145033Z","shell.execute_reply":"2024-05-09T17:32:35.152560Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"Class\n0    20000\n1      492\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"# transform the dataset\nfrom imblearn.over_sampling import SMOTE\noversample = SMOTE()\nX_r, y = oversample.fit_resample(X, tr_data['Class'])\n# # summarize the new class distribution\n# counter = Counter(y)\n# print(counter)\n# # scatter plot of examples by class label\n# for label, _ in counter.items():\n# \trow_ix = where(y == label)[0]","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:33:15.570965Z","iopub.execute_input":"2024-05-09T17:33:15.571627Z","iopub.status.idle":"2024-05-09T17:33:15.608877Z","shell.execute_reply.started":"2024-05-09T17:33:15.571595Z","shell.execute_reply":"2024-05-09T17:33:15.608045Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"y.value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:33:29.478944Z","iopub.execute_input":"2024-05-09T17:33:29.479278Z","iopub.status.idle":"2024-05-09T17:33:29.486995Z","shell.execute_reply.started":"2024-05-09T17:33:29.479253Z","shell.execute_reply":"2024-05-09T17:33:29.486052Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"Class\n0    20000\n1    20000\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\n## Standardizing the data\nX_r2 = StandardScaler().fit_transform(X_r)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:34:27.134215Z","iopub.execute_input":"2024-05-09T17:34:27.135195Z","iopub.status.idle":"2024-05-09T17:34:27.161836Z","shell.execute_reply.started":"2024-05-09T17:34:27.135160Z","shell.execute_reply":"2024-05-09T17:34:27.160990Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"X_train,X_test,y_train,y_test = train_test_split(X_r2, y, test_size=0.3 ,random_state=0 )","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:34:37.352643Z","iopub.execute_input":"2024-05-09T17:34:37.353024Z","iopub.status.idle":"2024-05-09T17:34:37.370720Z","shell.execute_reply.started":"2024-05-09T17:34:37.352993Z","shell.execute_reply":"2024-05-09T17:34:37.369547Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"markdown","source":"# Logistic Regression","metadata":{}},{"cell_type":"code","source":"model_LogisticRegression = LogisticRegression()","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:35:19.286543Z","iopub.execute_input":"2024-05-09T17:35:19.286952Z","iopub.status.idle":"2024-05-09T17:35:19.292668Z","shell.execute_reply.started":"2024-05-09T17:35:19.286923Z","shell.execute_reply":"2024-05-09T17:35:19.291444Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"model_LogisticRegression.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:35:24.782381Z","iopub.execute_input":"2024-05-09T17:35:24.782751Z","iopub.status.idle":"2024-05-09T17:35:25.145736Z","shell.execute_reply.started":"2024-05-09T17:35:24.782722Z","shell.execute_reply":"2024-05-09T17:35:25.144399Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"LogisticRegression()","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"LogisticRegression_accuracy=model_LogisticRegression.score(X_test,y_test)*100\nprint(f\"Accuracy by using Logistic Regression: {LogisticRegression_accuracy}%\")","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:35:59.438394Z","iopub.execute_input":"2024-05-09T17:35:59.439285Z","iopub.status.idle":"2024-05-09T17:35:59.449691Z","shell.execute_reply.started":"2024-05-09T17:35:59.439253Z","shell.execute_reply":"2024-05-09T17:35:59.448032Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"Accuracy by using Logistic Regression: 97.94166666666668%\n","output_type":"stream"}]},{"cell_type":"code","source":"y_pred_logistic = model_LogisticRegression.predict(X_test)\n\n# Calculer les diffÃ©rentes mesures d'Ã©valuation\naccuracy_logistic = accuracy_score(y_test, y_pred_logistic)\nprecision_logistic = precision_score(y_test, y_pred_logistic)\nrecall_logistic = recall_score(y_test, y_pred_logistic)\nf1_logistic = f1_score(y_test, y_pred_logistic)\n\n# Afficher les rÃ©sultats pour la rÃ©gression logistique\nprint(\"Pour le modÃ¨le de rÃ©gression logistique :\")\nprint(f\"Accuracy: {accuracy_logistic * 100:.2f}%\")\nprint(f\"Precision: {precision_logistic * 100:.2f}%\")\nprint(f\"Recall: {recall_logistic * 100:.2f}%\")\nprint(f\"F1 Score: {f1_logistic * 100:.2f}%\")\nprint()","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:50:25.480324Z","iopub.execute_input":"2024-05-09T17:50:25.481267Z","iopub.status.idle":"2024-05-09T17:50:25.502872Z","shell.execute_reply.started":"2024-05-09T17:50:25.481228Z","shell.execute_reply":"2024-05-09T17:50:25.501641Z"},"trusted":true},"execution_count":36,"outputs":[{"name":"stdout","text":"Pour le modÃ¨le de rÃ©gression logistique :\nAccuracy: 97.94%\nPrecision: 99.18%\nRecall: 96.68%\nF1 Score: 97.92%\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# Afficher le rapport de classification\nprint(classification_report(y_test, y_pred_logistic, digits=4))","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:58:20.372897Z","iopub.execute_input":"2024-05-09T17:58:20.373234Z","iopub.status.idle":"2024-05-09T17:58:20.390389Z","shell.execute_reply.started":"2024-05-09T17:58:20.373208Z","shell.execute_reply":"2024-05-09T17:58:20.389573Z"},"trusted":true},"execution_count":49,"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0     0.9676    0.9920    0.9797      5998\n           1     0.9918    0.9668    0.9792      6002\n\n    accuracy                         0.9794     12000\n   macro avg     0.9797    0.9794    0.9794     12000\nweighted avg     0.9797    0.9794    0.9794     12000\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# PrÃ©dire les classes sur l'ensemble de test\ny_pred_LR = model_LogisticRegression.predict(X_test)\n\n# Calculer la matrice de confusion\nconf_matrix_LR = confusion_matrix(y_test, y_pred_LR)\n\n# CrÃ©er une heatmap de la matrice de confusion\nplt.figure(figsize=(8, 6))\nsns.heatmap(conf_matrix_LR, annot=True, cmap='Blues', fmt='g')\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.title('Confusion Matrix')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:36:01.850576Z","iopub.execute_input":"2024-05-09T17:36:01.850903Z","iopub.status.idle":"2024-05-09T17:36:02.141806Z","shell.execute_reply.started":"2024-05-09T17:36:01.850878Z","shell.execute_reply":"2024-05-09T17:36:02.140830Z"},"trusted":true},"execution_count":26,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Decision Tree","metadata":{}},{"cell_type":"code","source":"model_DecisionTree=DecisionTreeClassifier()","metadata":{"execution":{"iopub.status.busy":"2024-05-09T18:34:22.763805Z","iopub.execute_input":"2024-05-09T18:34:22.764173Z","iopub.status.idle":"2024-05-09T18:34:22.768408Z","shell.execute_reply.started":"2024-05-09T18:34:22.764144Z","shell.execute_reply":"2024-05-09T18:34:22.767501Z"},"trusted":true},"execution_count":74,"outputs":[]},{"cell_type":"code","source":"model_DecisionTree.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T18:34:23.507817Z","iopub.execute_input":"2024-05-09T18:34:23.508164Z","iopub.status.idle":"2024-05-09T18:34:24.854965Z","shell.execute_reply.started":"2024-05-09T18:34:23.508137Z","shell.execute_reply":"2024-05-09T18:34:24.854049Z"},"trusted":true},"execution_count":75,"outputs":[{"execution_count":75,"output_type":"execute_result","data":{"text/plain":"DecisionTreeClassifier()","text/html":"<style>#sk-container-id-7 {color: black;background-color: white;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"DecisionTree_accuracy=model_DecisionTree.score(X_test,y_test)*100\nprint(f\"Accuracy by using Decision Tree: {DecisionTree_accuracy}%\")","metadata":{"execution":{"iopub.status.busy":"2024-05-09T18:34:24.986666Z","iopub.execute_input":"2024-05-09T18:34:24.986965Z","iopub.status.idle":"2024-05-09T18:34:24.995241Z","shell.execute_reply.started":"2024-05-09T18:34:24.986942Z","shell.execute_reply":"2024-05-09T18:34:24.994310Z"},"trusted":true},"execution_count":76,"outputs":[{"name":"stdout","text":"Accuracy by using Decision Tree: 98.84166666666667%\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n\n# Calculer les prÃ©dictions du modÃ¨le Decision Tree\ny_pred_decision_tree = model_DecisionTree.predict(X_test)\n\n# Calculer les diffÃ©rentes mesures d'Ã©valuation\naccuracy_decision_tree = accuracy_score(y_test, y_pred_decision_tree)\nprecision_decision_tree = precision_score(y_test, y_pred_decision_tree)\nrecall_decision_tree = recall_score(y_test, y_pred_decision_tree)\nf1_decision_tree = f1_score(y_test, y_pred_decision_tree)\n\n# Afficher les rÃ©sultats pour l'arbre de dÃ©cision\nprint(\"Pour le modÃ¨le d'arbre de dÃ©cision :\")\nprint(f\"Accuracy: {accuracy_decision_tree * 100:.2f}%\")\nprint(f\"Precision: {precision_decision_tree * 100:.2f}%\")\nprint(f\"Recall: {recall_decision_tree * 100:.2f}%\")\nprint(f\"F1 Score: {f1_decision_tree * 100:.2f}%\")","metadata":{"execution":{"iopub.status.busy":"2024-05-09T18:34:31.559065Z","iopub.execute_input":"2024-05-09T18:34:31.559429Z","iopub.status.idle":"2024-05-09T18:34:31.581100Z","shell.execute_reply.started":"2024-05-09T18:34:31.559401Z","shell.execute_reply":"2024-05-09T18:34:31.580218Z"},"trusted":true},"execution_count":77,"outputs":[{"name":"stdout","text":"Pour le modÃ¨le d'arbre de dÃ©cision :\nAccuracy: 98.84%\nPrecision: 98.46%\nRecall: 99.23%\nF1 Score: 98.85%\n","output_type":"stream"}]},{"cell_type":"code","source":"print(classification_report(y_test, y_pred_decision_tree, digits=4))","metadata":{"execution":{"iopub.status.busy":"2024-05-09T18:34:32.356129Z","iopub.execute_input":"2024-05-09T18:34:32.356464Z","iopub.status.idle":"2024-05-09T18:34:32.371963Z","shell.execute_reply.started":"2024-05-09T18:34:32.356439Z","shell.execute_reply":"2024-05-09T18:34:32.371154Z"},"trusted":true},"execution_count":78,"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0     0.9923    0.9845    0.9884      5998\n           1     0.9846    0.9923    0.9885      6002\n\n    accuracy                         0.9884     12000\n   macro avg     0.9884    0.9884    0.9884     12000\nweighted avg     0.9884    0.9884    0.9884     12000\n\n","output_type":"stream"}]},{"cell_type":"code","source":"y_pred_DT = model_DecisionTree.predict(X_test)\n\nconf_matrix_DT = confusion_matrix(y_test, y_pred_DT)\n\n# CrÃ©er une heatmap de la matrice de confusion\nplt.figure(figsize=(8, 6))\nsns.heatmap(conf_matrix_DT, annot=True, cmap='Blues', fmt='g')\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.title('Confusion Matrix')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:47:22.597774Z","iopub.execute_input":"2024-05-09T17:47:22.598648Z","iopub.status.idle":"2024-05-09T17:47:22.826248Z","shell.execute_reply.started":"2024-05-09T17:47:22.598596Z","shell.execute_reply":"2024-05-09T17:47:22.825237Z"},"trusted":true},"execution_count":33,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Random Forest","metadata":{}},{"cell_type":"code","source":"model_RandomForest =RandomForestClassifier()","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:54:11.983370Z","iopub.execute_input":"2024-05-09T17:54:11.984036Z","iopub.status.idle":"2024-05-09T17:54:11.988386Z","shell.execute_reply.started":"2024-05-09T17:54:11.984002Z","shell.execute_reply":"2024-05-09T17:54:11.987398Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"model_RandomForest.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:54:17.168704Z","iopub.execute_input":"2024-05-09T17:54:17.169491Z","iopub.status.idle":"2024-05-09T17:54:29.635454Z","shell.execute_reply.started":"2024-05-09T17:54:17.169449Z","shell.execute_reply":"2024-05-09T17:54:29.634502Z"},"trusted":true},"execution_count":41,"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"RandomForestClassifier()","text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"RandomForest_accuracy=model_RandomForest.score(X_test,y_test)*100\nprint(f\"Accuracy by using Random Forest: {RandomForest_accuracy}%\")","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:54:29.637246Z","iopub.execute_input":"2024-05-09T17:54:29.637891Z","iopub.status.idle":"2024-05-09T17:54:29.762549Z","shell.execute_reply.started":"2024-05-09T17:54:29.637854Z","shell.execute_reply":"2024-05-09T17:54:29.761351Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"Accuracy by using Random Forest: 99.68333333333334%\n","output_type":"stream"}]},{"cell_type":"code","source":"# Calculer les prÃ©dictions du modÃ¨le Random Forest\ny_pred_RF = model_RandomForest.predict(X_test)\n\n# Calculer les diffÃ©rentes mesures d'Ã©valuation\naccuracy_RF = accuracy_score(y_test, y_pred_RF)\nprecision_RF = precision_score(y_test, y_pred_RF)\nrecall_RF = recall_score(y_test, y_pred_RF)\nf1_RF = f1_score(y_test, y_pred_RF)\n\n# Afficher les rÃ©sultats\nprint(f\"Accuracy by using Random Forest: {accuracy_RF * 100:.2f}%\")\nprint(f\"Precision by using Random Forest: {precision_RF * 100:.2f}%\")\nprint(f\"Recall by using Random Forest: {recall_RF * 100:.2f}%\")\nprint(f\"F1 Score by using Random Forest: {f1_RF * 100:.2f}%\")","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:55:28.767732Z","iopub.execute_input":"2024-05-09T17:55:28.768065Z","iopub.status.idle":"2024-05-09T17:55:28.898587Z","shell.execute_reply.started":"2024-05-09T17:55:28.768041Z","shell.execute_reply":"2024-05-09T17:55:28.897574Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"Accuracy by using Random Forest: 99.68%\nPrecision by using Random Forest: 99.75%\nRecall by using Random Forest: 99.62%\nF1 Score by using Random Forest: 99.68%\n","output_type":"stream"}]},{"cell_type":"code","source":"print(classification_report(y_test, y_pred_RF, digits=4))","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:56:59.278624Z","iopub.execute_input":"2024-05-09T17:56:59.278987Z","iopub.status.idle":"2024-05-09T17:56:59.297665Z","shell.execute_reply.started":"2024-05-09T17:56:59.278959Z","shell.execute_reply":"2024-05-09T17:56:59.296667Z"},"trusted":true},"execution_count":46,"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0     0.9962    0.9975    0.9968      5998\n           1     0.9975    0.9962    0.9968      6002\n\n    accuracy                         0.9968     12000\n   macro avg     0.9968    0.9968    0.9968     12000\nweighted avg     0.9968    0.9968    0.9968     12000\n\n","output_type":"stream"}]},{"cell_type":"code","source":"\n# Calculer la matrice de confusion\nconf_matrix_RF = confusion_matrix(y_test, y_pred_RF)\n\n# CrÃ©er une heatmap de la matrice de confusion\nplt.figure(figsize=(8, 6))\nsns.heatmap(conf_matrix_RF, annot=True, cmap='Blues', fmt='g')\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.title('Confusion Matrix')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:54:37.321286Z","iopub.execute_input":"2024-05-09T17:54:37.322118Z","iopub.status.idle":"2024-05-09T17:54:37.791500Z","shell.execute_reply.started":"2024-05-09T17:54:37.322088Z","shell.execute_reply":"2024-05-09T17:54:37.790670Z"},"trusted":true},"execution_count":43,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# KNeighbors","metadata":{}},{"cell_type":"code","source":"model_KNN = KNeighborsClassifier()","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:59:49.062195Z","iopub.execute_input":"2024-05-09T17:59:49.063088Z","iopub.status.idle":"2024-05-09T17:59:49.067120Z","shell.execute_reply.started":"2024-05-09T17:59:49.063056Z","shell.execute_reply":"2024-05-09T17:59:49.066139Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"model_KNN.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:59:53.773453Z","iopub.execute_input":"2024-05-09T17:59:53.774062Z","iopub.status.idle":"2024-05-09T17:59:53.782897Z","shell.execute_reply.started":"2024-05-09T17:59:53.774031Z","shell.execute_reply":"2024-05-09T17:59:53.782019Z"},"trusted":true},"execution_count":51,"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"KNeighborsClassifier()","text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"KNN_accuracy=model_KNN.score(X_test,y_test)*100\nprint(f\"Accuracy by using KNN: {KNN_accuracy}%\")","metadata":{"execution":{"iopub.status.busy":"2024-05-09T17:59:58.563029Z","iopub.execute_input":"2024-05-09T17:59:58.563715Z","iopub.status.idle":"2024-05-09T18:00:00.001525Z","shell.execute_reply.started":"2024-05-09T17:59:58.563684Z","shell.execute_reply":"2024-05-09T18:00:00.000557Z"},"trusted":true},"execution_count":52,"outputs":[{"name":"stdout","text":"Accuracy by using KNN: 99.14166666666667%\n","output_type":"stream"}]},{"cell_type":"code","source":"# Calculer les prÃ©dictions du modÃ¨le KNN\ny_pred_KNN = model_KNN.predict(X_test)\n\n# Calculer les diffÃ©rentes mesures d'Ã©valuation\naccuracy_KNN = accuracy_score(y_test, y_pred_KNN)\nprecision_KNN = precision_score(y_test, y_pred_KNN)\nrecall_KNN = recall_score(y_test, y_pred_KNN)\nf1_KNN = f1_score(y_test, y_pred_KNN)\n\n# Afficher les rÃ©sultats\nprint(f\"Accuracy by using KNN: {accuracy_KNN * 100:.2f}%\")\nprint(f\"Precision by using KNN: {precision_KNN * 100:.2f}%\")\nprint(f\"Recall by using KNN: {recall_KNN * 100:.2f}%\")\nprint(f\"F1 Score by using KNN: {f1_KNN * 100:.2f}%\")\n","metadata":{"execution":{"iopub.status.busy":"2024-05-09T18:01:17.628679Z","iopub.execute_input":"2024-05-09T18:01:17.629057Z","iopub.status.idle":"2024-05-09T18:01:19.106672Z","shell.execute_reply.started":"2024-05-09T18:01:17.629026Z","shell.execute_reply":"2024-05-09T18:01:19.105560Z"},"trusted":true},"execution_count":54,"outputs":[{"name":"stdout","text":"Accuracy by using KNN: 99.14%\nPrecision by using KNN: 98.31%\nRecall by using KNN: 100.00%\nF1 Score by using KNN: 99.15%\n","output_type":"stream"}]},{"cell_type":"code","source":"print(classification_report(y_test, y_pred_KNN, digits=4))","metadata":{"execution":{"iopub.status.busy":"2024-05-09T18:01:39.220481Z","iopub.execute_input":"2024-05-09T18:01:39.220879Z","iopub.status.idle":"2024-05-09T18:01:39.239161Z","shell.execute_reply.started":"2024-05-09T18:01:39.220850Z","shell.execute_reply":"2024-05-09T18:01:39.238213Z"},"trusted":true},"execution_count":55,"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0     1.0000    0.9828    0.9913      5998\n           1     0.9831    1.0000    0.9915      6002\n\n    accuracy                         0.9914     12000\n   macro avg     0.9916    0.9914    0.9914     12000\nweighted avg     0.9916    0.9914    0.9914     12000\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# PrÃ©dire les classes sur l'ensemble de test\ny_pred_KNN = model_KNN.predict(X_test)\n\n# Calculer la matrice de confusion\nconf_matrix_KNN = confusion_matrix(y_test, y_pred_KNN)\n\n# CrÃ©er une heatmap de la matrice de confusion\nplt.figure(figsize=(8, 6))\nsns.heatmap(conf_matrix_KNN, annot=True, cmap='Blues', fmt='g')\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.title('Confusion Matrix')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-09T18:00:14.512730Z","iopub.execute_input":"2024-05-09T18:00:14.513084Z","iopub.status.idle":"2024-05-09T18:00:16.175319Z","shell.execute_reply.started":"2024-05-09T18:00:14.513056Z","shell.execute_reply":"2024-05-09T18:00:16.174156Z"},"trusted":true},"execution_count":53,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# XGBoost","metadata":{}},{"cell_type":"code","source":"modelxgb = XGBClassifier()","metadata":{"execution":{"iopub.status.busy":"2024-05-09T18:18:15.660618Z","iopub.execute_input":"2024-05-09T18:18:15.661338Z","iopub.status.idle":"2024-05-09T18:18:15.665408Z","shell.execute_reply.started":"2024-05-09T18:18:15.661306Z","shell.execute_reply":"2024-05-09T18:18:15.664498Z"},"trusted":true},"execution_count":56,"outputs":[]},{"cell_type":"code","source":"modelxgb.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T18:18:23.791092Z","iopub.execute_input":"2024-05-09T18:18:23.792216Z","iopub.status.idle":"2024-05-09T18:18:24.465089Z","shell.execute_reply.started":"2024-05-09T18:18:23.792166Z","shell.execute_reply":"2024-05-09T18:18:24.464287Z"},"trusted":true},"execution_count":57,"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, random_state=None, ...)","text/html":"<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"xgb_accuracy=modelxgb.score(X_test,y_test)*100\nprint(f\"Accuracy by using xgb: {xgb_accuracy}%\")","metadata":{"execution":{"iopub.status.busy":"2024-05-09T18:18:33.888477Z","iopub.execute_input":"2024-05-09T18:18:33.888869Z","iopub.status.idle":"2024-05-09T18:18:33.916143Z","shell.execute_reply.started":"2024-05-09T18:18:33.888839Z","shell.execute_reply":"2024-05-09T18:18:33.915447Z"},"trusted":true},"execution_count":58,"outputs":[{"name":"stdout","text":"Accuracy by using xgb: 99.81666666666666%\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n\n# Calculer les prÃ©dictions du modÃ¨le XGBoost\ny_pred_XGB = modelxgb.predict(X_test)\n\n# Calculer les diffÃ©rentes mesures d'Ã©valuation\naccuracy_XGB = accuracy_score(y_test, y_pred_XGB)\nprecision_XGB = precision_score(y_test, y_pred_XGB)\nrecall_XGB = recall_score(y_test, y_pred_XGB)\nf1_XGB = f1_score(y_test, y_pred_XGB)\n\n# Afficher les rÃ©sultats\nprint(f\"Accuracy by using XGBoost: {accuracy_XGB * 100:.2f}%\")\nprint(f\"Precision by using XGBoost: {precision_XGB * 100:.2f}%\")\nprint(f\"Recall by using XGBoost: {recall_XGB * 100:.2f}%\")\nprint(f\"F1 Score by using XGBoost: {f1_XGB * 100:.2f}%\")\n","metadata":{"execution":{"iopub.status.busy":"2024-05-09T18:19:27.994603Z","iopub.execute_input":"2024-05-09T18:19:27.994967Z","iopub.status.idle":"2024-05-09T18:19:28.035565Z","shell.execute_reply.started":"2024-05-09T18:19:27.994937Z","shell.execute_reply":"2024-05-09T18:19:28.034574Z"},"trusted":true},"execution_count":60,"outputs":[{"name":"stdout","text":"Accuracy by using XGBoost: 99.82%\nPrecision by using XGBoost: 99.73%\nRecall by using XGBoost: 99.90%\nF1 Score by using XGBoost: 99.82%\n","output_type":"stream"}]},{"cell_type":"code","source":"print(classification_report(y_test, y_pred_XGB, digits=4))","metadata":{"execution":{"iopub.status.busy":"2024-05-09T18:19:41.238781Z","iopub.execute_input":"2024-05-09T18:19:41.239155Z","iopub.status.idle":"2024-05-09T18:19:41.257673Z","shell.execute_reply.started":"2024-05-09T18:19:41.239117Z","shell.execute_reply":"2024-05-09T18:19:41.256645Z"},"trusted":true},"execution_count":61,"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0     0.9990    0.9973    0.9982      5998\n           1     0.9973    0.9990    0.9982      6002\n\n    accuracy                         0.9982     12000\n   macro avg     0.9982    0.9982    0.9982     12000\nweighted avg     0.9982    0.9982    0.9982     12000\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# Calculer la matrice de confusion\nconf_matrix_XGB = confusion_matrix(y_test, y_pred_XGB)\n\n# CrÃ©er une heatmap de la matrice de confusion\nplt.figure(figsize=(8, 6))\nsns.heatmap(conf_matrix_XGB, annot=True, cmap='Blues', fmt='g')\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.title('Confusion Matrix')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-09T18:23:52.008874Z","iopub.execute_input":"2024-05-09T18:23:52.009292Z","iopub.status.idle":"2024-05-09T18:23:52.260370Z","shell.execute_reply.started":"2024-05-09T18:23:52.009262Z","shell.execute_reply":"2024-05-09T18:23:52.259504Z"},"trusted":true},"execution_count":62,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAApIAAAIjCAYAAACwHvu2AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABInElEQVR4nO3deVhV5d7/8c9GZYMgoKggOWuplDlVSqVmmVRYmnrKIcUp04Om4JRlTg10LHNIy5NleEwrrbSjlkOamokTRjmkRxOlUnAERBkU1u8PH/bPLZrsJVuQ/X4917quWOvea33Xfq56vs/nXuveFsMwDAEAAAAOcivqAgAAAHBropEEAACAKTSSAAAAMIVGEgAAAKbQSAIAAMAUGkkAAACYQiMJAAAAU2gkAQAAYAqNJAAAAEyhkQTwtw4cOKB27drJ19dXFotFS5cuLdTzHz58WBaLRTExMYV63lvZQw89pIceeqioywCA66KRBG4Bv//+u1544QXVrl1bHh4e8vHx0QMPPKDp06crIyPDqdcODw/Xrl279MYbb2j+/Pm65557nHq9m6l3796yWCzy8fG56vd44MABWSwWWSwWvfPOOw6f/+jRo5owYYLi4+MLoVoAKH5KF3UBAP7eihUr9I9//ENWq1W9evXSXXfdpezsbG3atEkjR47Unj179OGHHzrl2hkZGYqNjdUrr7yiwYMHO+UaNWrUUEZGhsqUKeOU819P6dKldf78eS1btkzPPPOM3bEFCxbIw8NDmZmZps599OhRTZw4UTVr1lTjxo0L/LnVq1ebuh4A3Gw0kkAxlpCQoK5du6pGjRpat26dqlSpYjsWERGhgwcPasWKFU67/okTJyRJfn5+TruGxWKRh4eH085/PVarVQ888IA+++yzfI3kwoULFRYWpq+++uqm1HL+/HmVLVtW7u7uN+V6AHCjmNoGirHJkycrPT1dH3/8sV0Tmadu3boaOnSo7e+LFy/qtddeU506dWS1WlWzZk29/PLLysrKsvtczZo11b59e23atEn33XefPDw8VLt2bf3nP/+xjZkwYYJq1KghSRo5cqQsFotq1qwp6dKUcN4/X27ChAmyWCx2+9asWaMHH3xQfn5+8vb2Vr169fTyyy/bjl/rGcl169apZcuW8vLykp+fnzp06KDffvvtqtc7ePCgevfuLT8/P/n6+qpPnz46f/78tb/YK3Tv3l3fffedUlJSbPu2b9+uAwcOqHv37vnGnz59WiNGjFDDhg3l7e0tHx8fPf744/rll19sY9avX697771XktSnTx/bFHnefT700EO66667FBcXp1atWqls2bK27+XKZyTDw8Pl4eGR7/5DQ0NVvnx5HT16tMD3CgCFiUYSKMaWLVum2rVr6/777y/Q+P79+2vcuHFq2rSppk6dqtatWys6Olpdu3bNN/bgwYPq0qWLHn30UU2ZMkXly5dX7969tWfPHklSp06dNHXqVElSt27dNH/+fE2bNs2h+vfs2aP27dsrKytLkyZN0pQpU/TUU0/pp59++tvPff/99woNDdXx48c1YcIERUVFafPmzXrggQd0+PDhfOOfeeYZnT17VtHR0XrmmWcUExOjiRMnFrjOTp06yWKx6Ouvv7btW7hwoerXr6+mTZvmG3/o0CEtXbpU7du317vvvquRI0dq165dat26ta2pa9CggSZNmiRJGjBggObPn6/58+erVatWtvOcOnVKjz/+uBo3bqxp06apTZs2V61v+vTpqlSpksLDw5WTkyNJ+ve//63Vq1frvffeU1BQUIHvFQAKlQGgWEpNTTUkGR06dCjQ+Pj4eEOS0b9/f7v9I0aMMCQZ69ats+2rUaOGIcnYuHGjbd/x48cNq9VqDB8+3LYvISHBkGS8/fbbducMDw83atSoka+G8ePHG5f/Z2Xq1KmGJOPEiRPXrDvvGp988oltX+PGjY3KlSsbp06dsu375ZdfDDc3N6NXr175rte3b1+7cz799NOGv7//Na95+X14eXkZhmEYXbp0MR555BHDMAwjJyfHCAwMNCZOnHjV7yAzM9PIycnJdx9Wq9WYNGmSbd/27dvz3Vue1q1bG5KM2bNnX/VY69at7fatWrXKkGS8/vrrxqFDhwxvb2+jY8eO171HAHAmEkmgmEpLS5MklStXrkDjv/32W0lSVFSU3f7hw4dLUr5nKYODg9WyZUvb35UqVVK9evV06NAh0zVfKe/Zym+++Ua5ubkF+syxY8cUHx+v3r17q0KFCrb9d999tx599FHbfV5u4MCBdn+3bNlSp06dsn2HBdG9e3etX79eSUlJWrdunZKSkq46rS1deq7Sze3Sfz5zcnJ06tQp27T9zp07C3xNq9WqPn36FGhsu3bt9MILL2jSpEnq1KmTPDw89O9//7vA1wIAZ6CRBIopHx8fSdLZs2cLNP7IkSNyc3NT3bp17fYHBgbKz89PR44csdtfvXr1fOcoX768zpw5Y7Li/J599lk98MAD6t+/vwICAtS1a1ctWrTob5vKvDrr1auX71iDBg108uRJnTt3zm7/lfdSvnx5SXLoXp544gmVK1dOX3zxhRYsWKB7770333eZJzc3V1OnTtXtt98uq9WqihUrqlKlSvr111+Vmppa4GvedtttDr1Y884776hChQqKj4/XjBkzVLly5QJ/FgCcgUYSKKZ8fHwUFBSk3bt3O/S5K192uZZSpUpddb9hGKavkff8Xh5PT09t3LhR33//vXr27Klff/1Vzz77rB599NF8Y2/EjdxLHqvVqk6dOmnevHlasmTJNdNISXrzzTcVFRWlVq1a6dNPP9WqVau0Zs0a3XnnnQVOXqVL348jfv75Zx0/flyStGvXLoc+CwDOQCMJFGPt27fX77//rtjY2OuOrVGjhnJzc3XgwAG7/cnJyUpJSbG9gV0Yypcvb/eGc54rU09JcnNz0yOPPKJ3331Xe/fu1RtvvKF169bphx9+uOq58+rcv39/vmP79u1TxYoV5eXldWM3cA3du3fXzz//rLNnz171BaU8X375pdq0aaOPP/5YXbt2Vbt27dS2bdt830lBm/qCOHfunPr06aPg4GANGDBAkydP1vbt2wvt/ABgBo0kUIyNGjVKXl5e6t+/v5KTk/Md//333zV9+nRJl6ZmJeV7s/rdd9+VJIWFhRVaXXXq1FFqaqp+/fVX275jx45pyZIlduNOnz6d77N5C3NfuSRRnipVqqhx48aaN2+eXWO2e/durV692nafztCmTRu99tprmjlzpgIDA685rlSpUvnSzsWLF+uvv/6y25fX8F6t6XbU6NGjlZiYqHnz5undd99VzZo1FR4efs3vEQBuBhYkB4qxOnXqaOHChXr22WfVoEEDu1+22bx5sxYvXqzevXtLkho1aqTw8HB9+OGHSklJUevWrbVt2zbNmzdPHTt2vObSMmZ07dpVo0eP1tNPP60XX3xR58+f1wcffKA77rjD7mWTSZMmaePGjQoLC1ONGjV0/Phxvf/++6pataoefPDBa57/7bff1uOPP66QkBD169dPGRkZeu+99+Tr66sJEyYU2n1cyc3NTWPHjr3uuPbt22vSpEnq06eP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kJCgsLAwtWnTRvHx8Ro2bJj69++vVatWOVSvxTAMw8F7LPYyL15/DIBbU/l7Bxd1CQCcJOPnmUV27cXxR5127n80DjL92RMnTqhy5crasGGDWrVqpdTUVFWqVEkLFy5Uly5dJEn79u1TgwYNFBsbqxYtWui7775T+/btdfToUQUEBEiSZs+erdGjR+vEiRNyd3fX6NGjtWLFCu3evdt2ra5duyolJUUrV64scH0kkgAAwOVZLBanbVlZWUpLS7PbsrKyClRXamqqJKlChQqSpLi4OF24cEFt27a1jalfv76qV6+u2NhYSVJsbKwaNmxoayIlKTQ0VGlpadqzZ49tzOXnyBuTd46CopEEAAAuz82JW3R0tHx9fe226Ojo69aUm5urYcOG6YEHHtBdd90lSUpKSpK7u7v8/PzsxgYEBCgpKck25vImMu943rG/G5OWlqaMjIzr1paHt7YBAACcaMyYMYqKirLbZ7Var/u5iIgI7d69W5s2bXJWaTeMRhIAALg8Zy7/Y7VaC9Q4Xm7w4MFavny5Nm7cqKpVq9r2BwYGKjs7WykpKXapZHJysgIDA21jtm3bZne+vLe6Lx9z5ZveycnJ8vHxkaenZ4HrZGobAACgmDAMQ4MHD9aSJUu0bt061apVy+54s2bNVKZMGa1du9a2b//+/UpMTFRISIgkKSQkRLt27dLx48dtY9asWSMfHx8FBwfbxlx+jrwxeecoKBJJAADg8orLcuQRERFauHChvvnmG5UrV872TKOvr688PT3l6+urfv36KSoqShUqVJCPj4+GDBmikJAQtWjRQpLUrl07BQcHq2fPnpo8ebKSkpI0duxYRURE2JLRgQMHaubMmRo1apT69u2rdevWadGiRVqxYoVD9bL8D4BbCsv/ACVXUS7/s/TXJKedu+PdgQUee60p9k8++US9e/eWdGlB8uHDh+uzzz5TVlaWQkND9f7779umrSXpyJEjGjRokNavXy8vLy+Fh4frrbfeUunS/z9DXL9+vSIjI7V3715VrVpVr776qu0aBa6XRhLArYRGEii5irKR/GaX8xrJDg0L3kjeanhGEgAAAKbwjCQAAHB5bsXmKclbC40kAABweU5c/adEY2obAAAAppBIAgAAl2dhatsUEkkAAACYQiIJAABcHs9ImkMiCQAAAFNIJAEAgMtj+R9zSCQBAABgCokk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"},"metadata":{}}]},{"cell_type":"code","source":"print(f\"Accuracy by using XGBoost: {accuracy_XGB * 100:.2f}%\")\nprint(f\"Precision by using XGBoost: {precision_XGB * 100:.2f}%\")\nprint(f\"Recall by using XGBoost: {recall_XGB * 100:.2f}%\")\nprint(f\"F1 Score by using XGBoost: {f1_XGB * 100:.2f}%\")","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\n# CrÃ©ation du tableau comparatif\ndf = pd.DataFrame({\n    'ModÃ¨le': ['Logistic Regression', 'Decision Tree', 'Random Forest', 'KNN', 'XGBoost'],\n    'Accuracy (%)': [accuracy_logistic * 100, accuracy_decision_tree * 100, accuracy_RF * 100, accuracy_KNN * 100, accuracy_XGB * 100],\n    'Precision (%)': [precision_logistic * 100, precision_decision_tree * 100, precision_RF * 100, precision_KNN * 100, precision_XGB * 100],\n    'Recall (%)': [recall_logistic * 100, recall_decision_tree * 100, recall_RF * 100, recall_KNN * 100, recall_XGB * 100],\n    'F1 Score (%)': [f1_logistic * 100, f1_decision_tree * 100, f1_RF * 100, f1_KNN * 100, f1_XGB * 100]\n})\n\n# Affichage du tableau avec deux chiffres aprÃ¨s la virgule\npd.options.display.float_format = '{:.2f}'.format\nprint(df)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-09T18:31:07.111866Z","iopub.execute_input":"2024-05-09T18:31:07.112235Z","iopub.status.idle":"2024-05-09T18:31:07.122999Z","shell.execute_reply.started":"2024-05-09T18:31:07.112209Z","shell.execute_reply":"2024-05-09T18:31:07.121945Z"},"trusted":true},"execution_count":69,"outputs":[{"name":"stdout","text":"                ModÃ¨le  Accuracy (%)  Precision (%)  Recall (%)  F1 Score (%)\n0  Logistic Regression         97.94          99.18       96.68         97.92\n1        Decision Tree         98.81          98.46       99.17         98.81\n2        Random Forest         99.68          99.75       99.62         99.68\n3                  KNN         99.14          98.31      100.00         99.15\n4              XGBoost         99.82          99.73       99.90         99.82\n","output_type":"stream"}]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-05-09T18:32:05.610870Z","iopub.execute_input":"2024-05-09T18:32:05.611223Z","iopub.status.idle":"2024-05-09T18:32:05.622171Z","shell.execute_reply.started":"2024-05-09T18:32:05.611196Z","shell.execute_reply":"2024-05-09T18:32:05.621262Z"},"trusted":true},"execution_count":70,"outputs":[{"execution_count":70,"output_type":"execute_result","data":{"text/plain":"                ModÃ¨le  Accuracy (%)  Precision (%)  Recall (%)  F1 Score (%)\n0  Logistic Regression         97.94          99.18       96.68         97.92\n1        Decision Tree         98.81          98.46       99.17         98.81\n2        Random Forest         99.68          99.75       99.62         99.68\n3                  KNN         99.14          98.31      100.00         99.15\n4              XGBoost         99.82          99.73       99.90         99.82","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ModÃ¨le</th>\n      <th>Accuracy (%)</th>\n      <th>Precision (%)</th>\n      <th>Recall (%)</th>\n      <th>F1 Score (%)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Logistic Regression</td>\n      <td>97.94</td>\n      <td>99.18</td>\n      <td>96.68</td>\n      <td>97.92</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Decision Tree</td>\n      <td>98.81</td>\n      <td>98.46</td>\n      <td>99.17</td>\n      <td>98.81</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Random Forest</td>\n      <td>99.68</td>\n      <td>99.75</td>\n      <td>99.62</td>\n      <td>99.68</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>KNN</td>\n      <td>99.14</td>\n      <td>98.31</td>\n      <td>100.00</td>\n      <td>99.15</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>XGBoost</td>\n      <td>99.82</td>\n      <td>99.73</td>\n      <td>99.90</td>\n      <td>99.82</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}